/*
 * This file is generated by jOOQ.
 */
package com.sh.jooq.codegen.tables.records;


import com.sh.jooq.codegen.tables.TUser;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TUserRecord extends UpdatableRecordImpl<TUserRecord> implements Record8<Long, Boolean, Boolean, Boolean, Boolean, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.t_user.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>security.t_user.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>security.t_user.account_non_expired</code>.
     */
    public void setAccountNonExpired(Boolean value) {
        set(1, value);
    }

    /**
     * Getter for <code>security.t_user.account_non_expired</code>.
     */
    public Boolean getAccountNonExpired() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>security.t_user.account_non_locked</code>.
     */
    public void setAccountNonLocked(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>security.t_user.account_non_locked</code>.
     */
    public Boolean getAccountNonLocked() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>security.t_user.credentials_non_expired</code>.
     */
    public void setCredentialsNonExpired(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>security.t_user.credentials_non_expired</code>.
     */
    public Boolean getCredentialsNonExpired() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>security.t_user.enabled</code>.
     */
    public void setEnabled(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>security.t_user.enabled</code>.
     */
    public Boolean getEnabled() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>security.t_user.password</code>.
     */
    public void setPassword(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>security.t_user.password</code>.
     */
    public String getPassword() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.t_user.username</code>.
     */
    public void setUsername(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>security.t_user.username</code>.
     */
    public String getUsername() {
        return (String) get(6);
    }

    /**
     * Setter for <code>security.t_user.secret_key</code>.
     */
    public void setSecretKey(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>security.t_user.secret_key</code>.
     */
    public String getSecretKey() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Boolean, Boolean, Boolean, Boolean, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Boolean, Boolean, Boolean, Boolean, String, String, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TUser.T_USER.ID;
    }

    @Override
    public Field<Boolean> field2() {
        return TUser.T_USER.ACCOUNT_NON_EXPIRED;
    }

    @Override
    public Field<Boolean> field3() {
        return TUser.T_USER.ACCOUNT_NON_LOCKED;
    }

    @Override
    public Field<Boolean> field4() {
        return TUser.T_USER.CREDENTIALS_NON_EXPIRED;
    }

    @Override
    public Field<Boolean> field5() {
        return TUser.T_USER.ENABLED;
    }

    @Override
    public Field<String> field6() {
        return TUser.T_USER.PASSWORD;
    }

    @Override
    public Field<String> field7() {
        return TUser.T_USER.USERNAME;
    }

    @Override
    public Field<String> field8() {
        return TUser.T_USER.SECRET_KEY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Boolean component2() {
        return getAccountNonExpired();
    }

    @Override
    public Boolean component3() {
        return getAccountNonLocked();
    }

    @Override
    public Boolean component4() {
        return getCredentialsNonExpired();
    }

    @Override
    public Boolean component5() {
        return getEnabled();
    }

    @Override
    public String component6() {
        return getPassword();
    }

    @Override
    public String component7() {
        return getUsername();
    }

    @Override
    public String component8() {
        return getSecretKey();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Boolean value2() {
        return getAccountNonExpired();
    }

    @Override
    public Boolean value3() {
        return getAccountNonLocked();
    }

    @Override
    public Boolean value4() {
        return getCredentialsNonExpired();
    }

    @Override
    public Boolean value5() {
        return getEnabled();
    }

    @Override
    public String value6() {
        return getPassword();
    }

    @Override
    public String value7() {
        return getUsername();
    }

    @Override
    public String value8() {
        return getSecretKey();
    }

    @Override
    public TUserRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TUserRecord value2(Boolean value) {
        setAccountNonExpired(value);
        return this;
    }

    @Override
    public TUserRecord value3(Boolean value) {
        setAccountNonLocked(value);
        return this;
    }

    @Override
    public TUserRecord value4(Boolean value) {
        setCredentialsNonExpired(value);
        return this;
    }

    @Override
    public TUserRecord value5(Boolean value) {
        setEnabled(value);
        return this;
    }

    @Override
    public TUserRecord value6(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public TUserRecord value7(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public TUserRecord value8(String value) {
        setSecretKey(value);
        return this;
    }

    @Override
    public TUserRecord values(Long value1, Boolean value2, Boolean value3, Boolean value4, Boolean value5, String value6, String value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TUserRecord
     */
    public TUserRecord() {
        super(TUser.T_USER);
    }

    /**
     * Create a detached, initialised TUserRecord
     */
    public TUserRecord(Long id, Boolean accountNonExpired, Boolean accountNonLocked, Boolean credentialsNonExpired, Boolean enabled, String password, String username, String secretKey) {
        super(TUser.T_USER);

        setId(id);
        setAccountNonExpired(accountNonExpired);
        setAccountNonLocked(accountNonLocked);
        setCredentialsNonExpired(credentialsNonExpired);
        setEnabled(enabled);
        setPassword(password);
        setUsername(username);
        setSecretKey(secretKey);
    }

    /**
     * Create a detached, initialised TUserRecord
     */
    public TUserRecord(com.sh.jooq.codegen.tables.pojos.TUser value) {
        super(TUser.T_USER);

        if (value != null) {
            setId(value.getId());
            setAccountNonExpired(value.getAccountNonExpired());
            setAccountNonLocked(value.getAccountNonLocked());
            setCredentialsNonExpired(value.getCredentialsNonExpired());
            setEnabled(value.getEnabled());
            setPassword(value.getPassword());
            setUsername(value.getUsername());
            setSecretKey(value.getSecretKey());
        }
    }
}
