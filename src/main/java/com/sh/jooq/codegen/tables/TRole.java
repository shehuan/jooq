/*
 * This file is generated by jOOQ.
 */
package com.sh.jooq.codegen.tables;


import com.sh.jooq.codegen.Keys;
import com.sh.jooq.codegen.Security;
import com.sh.jooq.codegen.tables.records.TRoleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRole extends TableImpl<TRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.t_role</code>
     */
    public static final TRole T_ROLE = new TRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRoleRecord> getRecordType() {
        return TRoleRecord.class;
    }

    /**
     * The column <code>security.t_role.id</code>.
     */
    public final TableField<TRoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>security.t_role.name</code>.
     */
    public final TableField<TRoleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>security.t_role.name_zh</code>.
     */
    public final TableField<TRoleRecord, String> NAME_ZH = createField(DSL.name("name_zh"), SQLDataType.VARCHAR(255), this, "");

    private TRole(Name alias, Table<TRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRole(Name alias, Table<TRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.t_role</code> table reference
     */
    public TRole(String alias) {
        this(DSL.name(alias), T_ROLE);
    }

    /**
     * Create an aliased <code>security.t_role</code> table reference
     */
    public TRole(Name alias) {
        this(alias, T_ROLE);
    }

    /**
     * Create a <code>security.t_role</code> table reference
     */
    public TRole() {
        this(DSL.name("t_role"), null);
    }

    public <O extends Record> TRole(Table<O> child, ForeignKey<O, TRoleRecord> key) {
        super(child, key, T_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<TRoleRecord, Long> getIdentity() {
        return (Identity<TRoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TRoleRecord> getPrimaryKey() {
        return Keys.KEY_T_ROLE_PRIMARY;
    }

    @Override
    public TRole as(String alias) {
        return new TRole(DSL.name(alias), this);
    }

    @Override
    public TRole as(Name alias) {
        return new TRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRole rename(String name) {
        return new TRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TRole rename(Name name) {
        return new TRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
